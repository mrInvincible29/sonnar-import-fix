name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mrinvincible29/sonnar-import-fix

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build-and-push.outputs.digest }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # Login against the Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Sonarr Import Monitor
            org.opencontainers.image.description=Automated tool to fix Sonarr import scoring discrepancies and stuck downloads
            org.opencontainers.image.vendor=mrInvincible29
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/mrInvincible29/sonnar-import-fix
            org.opencontainers.image.documentation=https://github.com/mrInvincible29/sonnar-import-fix#readme
            org.opencontainers.image.authors=mrInvincible29

      # Build and push Docker image with Buildx (don't push on PR)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            COMMIT_SHA=${{ github.sha }}

      # Test the built image
      - name: Test Docker image
        run: |
          docker run --rm \
            -e SONARR_URL=http://test:8989 \
            -e SONARR_API_KEY=test123456789012345678901234567890 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            --test-config --dry-run || true

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version || 'latest' }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload scan results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.sarif

  # Test on different platforms
  platform-test:
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [ubuntu-latest]
        include:
          - platform: ubuntu-latest
            arch: amd64
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Test Docker image on ${{ matrix.arch }}
        run: |
          # Pull the image for current architecture
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Test that it runs without errors
          docker run --rm \
            -e SONARR_URL=http://test:8989 \
            -e SONARR_API_KEY=test123456789012345678901234567890 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --help
          
          # Test health check endpoint (if webhook server starts)
          timeout 30s docker run --rm -d \
            -e SONARR_URL=http://test:8989 \
            -e SONARR_API_KEY=test123456789012345678901234567890 \
            -p 8090:8090 \
            --name test-container \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
          
          # Give it a moment to start
          sleep 5
          
          # Test health endpoint (will fail but should respond)
          curl -f http://localhost:8090/health || true
          
          # Cleanup
          docker stop test-container || true
          docker rm test-container || true