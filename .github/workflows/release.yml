name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-fail-under=76
      env:
        SONARR_URL: http://test-sonarr:8989
        SONARR_API_KEY: test-key-for-github-actions-123456789
        WEBHOOK_SECRET: test-webhook-secret-for-actions

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: release-tests
        name: release-coverage

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          COMMIT_SHA=${{ github.sha }}

  create-release:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Extract release notes
      id: extract-release-notes
      run: |
        # Extract release notes from CHANGELOG.md
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Find the section for this version in CHANGELOG.md
        awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
        
        # If no specific version found, use the latest entry
        if [ ! -s release_notes.md ]; then
          awk '/^## \[/{if(first_section) exit; first_section=1; next} first_section' CHANGELOG.md > release_notes.md
        fi
        
        echo "Release notes extracted:"
        cat release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Sonarr Import Monitor ${{ github.ref }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        files: CHANGELOG.md


  notify:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Release notification
      run: |
        echo "ðŸŽ‰ Release ${{ github.ref }} has been published!"
        echo "ðŸ“¦ Docker image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
        echo "ðŸ”— Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"